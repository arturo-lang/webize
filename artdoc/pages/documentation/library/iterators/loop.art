name: "loop"
address: "0x109EC84F8"
type: :function
module: "Iterators"
returns: [
        :nothing
    ]
description: "loop through collection, using given iterator and block"
example: {
        loop [1 2 3] 'x [
            print x
        ]
        ; 1
        ; 2
        ; 3
        
        loop 1..3 [x][
            print ["x =>" x]
        ]
        ; x => 1
        ; x => 2
        ; x => 3
        
        loop [A a B b C c] [x y][
            print [x "=>" y]
        ]
        ; A => a
        ; B => b
        ; C => c
        
        user: #[
            name: "John"
            surname: "Doe"
        ]
        
        loop user [k v][
            print [k "=>" v]
        ]
        ; name => John
        ; surname => Doe
        
        loop.with:'i ["zero" "one" "two"] 'x [
            print ["item at:" i "=>" x]
        ]
        ; 0 => zero
        ; 1 => one
        ; 2 => two
        
        loop.forever [1 2 3] => print 
        ; 1 2 3 1 2 3 1 2 3 ...
    }
attributes: #[
    with: #[
        types: [
                :literal
            ]
        description: "use given index"
        ]
    forever: #[
        types: [
                :boolean
            ]
        description: "cycle through collection infinitely"
        ]
    ]
arguments: #[
    collection: [
            :integer
             :string
             :dictionary
             :inline
             :block
        ]
    params: [
            :literal
             :block
        ]
    action: [
            :block
        ]
    ]
related: [
        "Iterators/function"
         "Iterators/flatten"
         "Iterators/insert"
         "Iterators/from"
    ]