#!/usr/bin/env arturo -d
;==========================================
; Webize
;
; Easy-to-use & minimalist 
; static website generator
; in Arturo
;
; @file: webize.art
; @author: drkameleon
;==========================================

Webize: #[
    version: "0.2"
] 

;--------------------------
; Globals
;--------------------------

Paths: #[
    root:				path\current
    build:  			"|project|/build"
    dataPath:           "|project|/data"
    pages:				"|project|/pages"
    theme:              "|project|/theme"
    resourceFonts:  	"|project|/theme/resources/fonts"
    resourceImages: 	"|project|/theme/resources/images"
    resourceScripts:	"|project|/theme/resources/scripts"
    resourceStyles: 	"|project|/theme/resources/styles"
]

Settings: #[]
Config: #[]
Target: "build"
Theme: "theme"
ThemeSettings: # "theme/settings.art"
InfoPadding: 13

;--------------------------
; Private Helpers
;--------------------------

{_showLogo}: function [][
    print join @ to :block {
        color.green"        _  _" color.white.bold" __        __   _     _         "  "\n"
        color.green"      _| || |_" color.white.bold" \      / /__| |__ (_)_______ "  "\n"
        color.green"     |_  -|  _|" color.white.bold" \ /\ / / _ \ '_ \| |_  / _ \"  "\n"
        color.green"     |_  |-  _|" color.white.bold"\ V  V /  __/ |_/ | |/ /  __/"  "\n"
        color.green"       |_||_|" color.white.bold"   \_/\_/ \___|_.__/|_/___\___|"
    }
]

{_showHeader}: function [message][
    print ""
    print color.magenta "==========================================================================="
    print [pad "" InfoPadding color.magenta upper message]
    print color.magenta "==========================================================================="
]

{_showInfo}: function [msg,inf][
    if? attr "section" ->
        print [color.green ("* " ++ msg) inf]
    else ->
        print [color.cyan ("   - " ++ msg) inf]
]

{_showInfoLine}: function [head,tail,success][
    if? success -> print [color.green pad head InfoPadding tail]
    else -> print [color.cyan pad head InfoPadding tail]
]

{_showHelp}: function [][
    print {
        Usage:
            webize [command] <options>

        Commands:
            new <name>                Creates new project
            build                     Builds current project 

            help                      Show this help screen
            version                   Show current version
    }
]

{_toolExists?}: function [cmd][ 
    not? empty? strip execute ~{!sh command -v |cmd|} 
]

{_routerDiagram}: function [p][
    join.with:" ▪︎ " split.path p -- extract.extension p
]

{_routeDiagram}: function [p][
    join.with:"/" split.path p
]

;--------------------------
; Helpers
;--------------------------

linkTo: function [location][
    i: 0 
    parts: location 
    if block? parts -> parts: join.path parts
    parts: split.path parts
    adjust: 0
    if "_index" = last pagePath -> adjust: 1
    while [and? [i < size pagePath]
                [i < size parts]]
    [
        if (pagePath \ i) <> (parts \ i) -> break
        i: i + 1
    ]
    ret: ""
    if? pagePath=parts [
        ret: "#"
        ret
    ]
    else [
        ret: join.path (repeat [".."] ((size pagePath)-i)-adjust) ++ join.path slice parts i (size parts)-1
        ret: replace encode.url replace ret "?" "-" "+" "-" 
        if? ret="" -> "."
        else -> ret
    ]
]

importPartial: function [pa][
    project: path\current
    read join.path @[~ Paths\theme pa]
]

getCanonical: function [root][
    parts: ("_index"=last pagePath) ? -> chop pagePath -> pagePath
    parts: map parts 'p -> replace encode.url replace p "?" "-" "+" "-" 
    final: root ++ (lower join.path parts) ++ "/"

    final: replace final "https://" "<HTTPS>"
    replace replace final "//" "/" "<HTTPS>" "https://"
]

permalink: function [tag][
    replace lower tag " " "-"
]

;--------------------------
; The main library
;--------------------------

{_newProject}: function [project][
    printInfo.section "creating new project:" project
    write.directory to :string project ø
    loop Paths [k,pa][
        subpath: ~pa
        printInfo "creating:" subpath
        write.directory ~pa ø
    ]
    write ~"|project|/pages/index.md.art" ""
    write ~"|project|/theme/default.html" ""
    write ~"|project|/theme/settings.art" ""
    write ~"|project|/config.art" ""
]

{_buildProject}: function [loc][
    if? exists? "config.art" [
        Config: #"config.art" 

        Data: #.data[]
        loop list "data" 'f [
            set Data (extract.basename f) -- extract.extension f do read f
        ]
        ;inspect Data

        ;-------------------------
        ; Render pages
        ;-------------------------
        call {_showHeader} ["rendering"]

        pages: select list.recursive "pages" => [ suffix? & ".art"]
        pageTree: #.data[]

        loop pages 'pg [
            current: pageTree
            p: pg -- "pages/"
            parts: (split.path p) -- "_index.art"
            loop parts 'part [
                pp: part
                if contains? pp ".art" ->
                    pp: pp -- ".art"

                if not? key? current pp [
                    set current pp #.data []
                ]
                current: get current pp
            ]
        ]
        ; inspect pageTree

        count: size pages
        loop.with: 'c pages 'page [
            sourcePath: page --"pages/"
            targetRoute: sourcePath -- extract.extension page
            targetPath: ""
            if? "_index" = extract.filename page ->
                targetPath: replace append join.path @[loc targetRoute] ".html" "_" ""
            else ->
                targetPath: append join.path @[loc targetRoute "index"] ".html"

            targetPath: lower replace replace targetPath "?" "-" " " "-"
            targetDir: extract.directory targetPath
            targetFile: extract.filename targetPath
            
            write.directory targetDir ø

            call {_showInfoLine} @[~"[|c+1|/|count|]" call {_routerDiagram} @[sourcePath] false]

            templatePath: ""
            loop ThemeSettings\routes [route,template][
                if not? empty? match sourcePath route [
                    ; print ["matched:" route "for:" sourcePath]
                    templatePath: join.path @[Theme template]
                    break
                ]
            ]

            do [
                pagePath: split.path targetRoute
                ;; debug
                ; print [ "\n"
                ;     "sourcePath:" sourcePath "\n"
                ;     "targetRoute:" targetRoute "\n"
                ;     "targetPath:" targetPath "\n"
                ;     "targetDir:" targetDir "\n"
                ;     "targetFile:" targetFile "\n"
                ;     "pagePath:" pagePath "\n"
                ;     "template:" templatePath "\n"
                ; ]
                W: #.data page
                rendered: new render.template read templatePath
                if key? ThemeSettings 'postprocess [
                    loop ThemeSettings\postprocess [k,v] [
                        replace 'rendered .regex k v
                    ]
                ]
                write targetPath rendered
                execute ~"html-minifier --collapse-whitespace --remove-comments |targetPath| -o |targetPath|"
            ]
            
        ]
        call {_showInfoLine} @["Done." "" true]

        ;-------------------------
        ; Post-processing
        ;-------------------------
        call {_showHeader} ["finalizing"]

        loop filter list "theme/resources" => [in? "."] 'res [ 
            folderPath: join.path @[loc "resources" extract.basename res]
            call {_showInfoLine} @["create" call {_routeDiagram} @[res -- "theme/resources/"] false]
            write.directory join.path @[loc "resources" extract.basename res] ø
            loop list res 'item [
                tgt: join.path @[loc item -- "theme/"]
                
                case [in? extract.extension item]
                    when? [[".scss" ".sass"]] [
                        call {_showInfoLine} @["process" call {_routeDiagram} @[item -- "theme/resources/"] false]
                        newTgt: replace tgt extract.extension tgt ".css"
                        execute ~"scss --style compressed |item| |newTgt|"
                    ]
                    when? [[".png"]][
                        call {_showInfoLine} @["compress" call {_routeDiagram} @[item -- "theme/resources/"] false]
                        newTgt: replace tgt extract.extension tgt ".webp"
                        execute ~"cwebp |item| -o |newTgt|"

                        call {_showInfoLine} @["copy" call {_routeDiagram} @[item -- "theme/resources/"] false]
                        execute ~"cp |item| |extract.directory tgt|"
                    ]
                    when? [[".js"]][
                        call {_showInfoLine} @["copy" call {_routeDiagram} @[item -- "theme/resources/"] false]
                        execute ~"cp |item| |extract.directory tgt|"

                        execute ~"uglifyjs --compress -o |tgt| -- |tgt|"
                    ]
                    else [
                        call {_showInfoLine} @["copy" call {_routeDiagram} @[item -- "theme/resources/"] false]
                        execute ~"cp |item| |extract.directory tgt|"
                    ]
            ]
        ]
        call {_showInfoLine} @["Done." "" true]
        print ""
    ]
    else [
        print "cannot build: not valid project"
    ]
]

initialize: function [][
    loop ['sass 'coffee 'minify 'cwebp] [tool][
        set Settings tool (call {_toolExists?} @[tool])
    ]
]

;--------------------------
; The main entry point
;--------------------------

if standalone? [
    call {_showLogo} []
    initialize

    if empty? arg [ call {_showHelp} [], exit ]
    case [key? args]
        when? -> "new" [
            call {_newProject} @[args\new]
        ]
        when? -> "build" [
            location: join.path @[path\current Target]
            if key? args 'at [ 
                location: join.path @[path\current to :string args\at ] 
            ]
            call {_buildProject} @[location]
        ]
        else  -> print "command not recognized"
]

;==========================================
; This is the end,
; my only friend, the end...
;==========================================